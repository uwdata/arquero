import Transformable from '../table/transformable';
import Query from './query';
import { Verb, Verbs } from './verb';

/**
 * Create a new query builder instance. The query builder provides
 * a table-like verb API to construct a query that can be
 * serialized or evaluated against Arquero tables.
 * @param {string} [tableName] The name of the table to query. If
 *  provided, will be used as the default input table to pull from
 *  a provided catalog to run the query against.
 * @return {QueryBuilder} A new query builder instance.
 */
export function query(tableName) {
  return new QueryBuilder(tableName);
}

/**
 * Create a new query builder instance from a serialized object.
 * @param {object} object A serialized query representation, such as
 *  those generated by query(...).toObject().
 * @returns {QueryBuilder} The instantiated query builder.
 */
export function queryFrom(object) {
  return QueryBuilder.from(object);
}

const proto = Query.prototype;

/**
 * Table-like interface for constructing queries.
 */
export default class QueryBuilder extends Transformable {

  /**
   * Construct a new query builder instance.
   */
  constructor(source, verbs, params) {
    super(params);
    this._verbs = verbs || [];
    this._params = params || null;
    this._table = source;
  }

  /**
   * Create a new query builder instance from a serialized object.
   * @param {object} object A serialized query representation, such as
   *  those generated by QueryBuilder.toObject().
   * @returns {QueryBuilder} The instantiated query builder.
   */
  static from({ verbs, table, params }) {
    return new QueryBuilder(
      table,
      verbs.map(Verb.from),
      params
    );
  }

  /**
   * Provide an informative object string tag.
   */
  get [Symbol.toStringTag]() {
    if (!this._verbs) return 'Object'; // bail if called on prototype
    const ns = this._verbs.length;
    return `Query: ${ns} verbs` + (this._table ? ` on '${this._table}'` : '');
  }

  /**
   * Return the number of verbs in the query.
   */
  get length() {
    return this._verbs.length;
  }

  /**
   * Return the name of the table the query applies to.
   * @return {string} The name of the source table, or undefined.
   */
  get tableName() {
    return this._table;
  }

  /**
   * Evaluate the query against a given table and catalog.
   * @param {Table} table The Arquero table to process.
   * @param {Function} catalog A table lookup function that accepts a table
   *  name string as input and returns a corresponding Arquero table.
   * @returns {Table} The resulting Arquero table.
   */
  evaluate(table, catalog) {
    return proto.evaluate.call(this, table, catalog);
  }

  /**
   * Serialize the query as a JSON-compatible object. The resulting
   * object can be passed to from() to re-instantiate the query.
   * @returns {object} A JSON-compatible object representing the query.
   */
  toObject() {
    return proto.toObject.call(this);
  }

  /**
   * Serialize the query as a JSON-compatible object. The resulting
   * object can be passed to from() to re-instantiate this query.
   * This method simply returns the result of toObject, but is provided
   * as a separate method to allow later customization of JSON export.
   * @returns {object} A JSON-compatible object representing the query.
   */
  toJSON() {
    return proto.toJSON.call(this);
  }

  /**
   * Serialize the query as a JSON-compatible abstract syntax tree.
   * All table expressions will be parsed and represented as AST instances
   * using a modified form of the Mozilla JavaScript AST format.
   * This method can be used to output parsed and serialized representations
   * to translate Arquero queries to alternative data processing platforms.
   * @returns {object} A JSON-compatible abstract syntax tree object.
   */
  toAST() {
    return proto.toAST.call(this);
  }
}

// Internal verb handlers
for (const name in Verbs) {
  const verb = Verbs[name];
  QueryBuilder.prototype['__' + name] = (qb, ...args) => new QueryBuilder(
    qb._table,
    qb._verbs.concat(verb(...args)),
    qb._params
  );
}